package gui;

import controller.Controller;
import model.Hackathon;
import model.Team;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class GiudiceTeamGui {
    private JPanel teamList;
    private JButton votaTeamButton;
    private JButton commentaDocumentoButton;
    private JTable table1;

    JFrame frame;
    Controller controller;

    public GiudiceTeamGui(JFrame frame, Controller controller, String hackathon) {
        this.frame = frame;
        this.controller = controller;

        refreshUILocalTable(hackathon);

        votaTeamButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (table1.getSelectedRow() < 0) {
                    JOptionPane.showMessageDialog(frame, "Devi selezionare un team", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                final String input = JOptionPane.showInputDialog("Voto:");
                if (input != null) {

                    int voto;
                    try {
                        voto = Integer.parseInt(input);
                        controller.votaTeam(table1.getValueAt(table1.getSelectedRow(), 0).toString(), voto);
                    } catch (NumberFormatException e1) {
                        e1.printStackTrace();
                        JOptionPane.showMessageDialog(frame, "Formato del voto non valido!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    JOptionPane.showMessageDialog(null, "Hai assegnato al team " + table1.getValueAt(table1.getSelectedRow(), 0).toString() + " il voto " + voto);
                    refreshUILocalTable(hackathon);
                } else {
                    JOptionPane.showMessageDialog(null, "Operazione annullata.");
                }
            }
        });
    }

    public void refreshUILocalTable(String hackathon)
    {
        controller.refreshHackathonListForGiudice();
        final ArrayList<Team> teams = controller.getLocalTeamsInHackathon(hackathon);

        String[] columns = {"Team", "Voto"};
        String[][] data = new String[teams.size()][columns.length];
        int i = 0;
        for (Team m : teams)
        {
            data[i][0] = m.getNome();
            data[i][1] = String.valueOf(m.getVoto());
            i++;
        }

        table1.setModel(new DefaultTableModel(data, columns));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        teamList = new JPanel();
        teamList.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        teamList.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        votaTeamButton = new JButton();
        votaTeamButton.setText("Vota Team");
        panel1.add(votaTeamButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        commentaDocumentoButton = new JButton();
        commentaDocumentoButton.setText("Commenta Documento");
        panel1.add(commentaDocumentoButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        table1 = new JTable();
        teamList.add(table1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return teamList;
    }

}
